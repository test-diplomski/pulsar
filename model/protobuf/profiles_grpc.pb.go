// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: profiles.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeccompServiceClient is the client API for SeccompService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeccompServiceClient interface {
	DefineSeccompProfile(ctx context.Context, in *SeccompProfileDefinitionRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	DefineSeccompProfileBatch(ctx context.Context, in *BatchSeccompProfileDefinitionRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	GetSeccompProfile(ctx context.Context, in *SeccompProfile, opts ...grpc.CallOption) (*GetSeccompProfileResponse, error)
	ExtendSeccompProfile(ctx context.Context, in *ExtendSeccompProfileRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	GetAllDescendantProfiles(ctx context.Context, in *SeccompProfile, opts ...grpc.CallOption) (*GetAllDescendantProfilesResponse, error)
	GetSeccompProfileByPrefix(ctx context.Context, in *SeccompProfile, opts ...grpc.CallOption) (*GetAllDescendantProfilesResponse, error)
}

type seccompServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeccompServiceClient(cc grpc.ClientConnInterface) SeccompServiceClient {
	return &seccompServiceClient{cc}
}

func (c *seccompServiceClient) DefineSeccompProfile(ctx context.Context, in *SeccompProfileDefinitionRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, "/helloworld.SeccompService/DefineSeccompProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seccompServiceClient) DefineSeccompProfileBatch(ctx context.Context, in *BatchSeccompProfileDefinitionRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, "/helloworld.SeccompService/DefineSeccompProfileBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seccompServiceClient) GetSeccompProfile(ctx context.Context, in *SeccompProfile, opts ...grpc.CallOption) (*GetSeccompProfileResponse, error) {
	out := new(GetSeccompProfileResponse)
	err := c.cc.Invoke(ctx, "/helloworld.SeccompService/GetSeccompProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seccompServiceClient) ExtendSeccompProfile(ctx context.Context, in *ExtendSeccompProfileRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, "/helloworld.SeccompService/ExtendSeccompProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seccompServiceClient) GetAllDescendantProfiles(ctx context.Context, in *SeccompProfile, opts ...grpc.CallOption) (*GetAllDescendantProfilesResponse, error) {
	out := new(GetAllDescendantProfilesResponse)
	err := c.cc.Invoke(ctx, "/helloworld.SeccompService/GetAllDescendantProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seccompServiceClient) GetSeccompProfileByPrefix(ctx context.Context, in *SeccompProfile, opts ...grpc.CallOption) (*GetAllDescendantProfilesResponse, error) {
	out := new(GetAllDescendantProfilesResponse)
	err := c.cc.Invoke(ctx, "/helloworld.SeccompService/GetSeccompProfileByPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeccompServiceServer is the server API for SeccompService service.
// All implementations must embed UnimplementedSeccompServiceServer
// for forward compatibility
type SeccompServiceServer interface {
	DefineSeccompProfile(context.Context, *SeccompProfileDefinitionRequest) (*BasicResponse, error)
	DefineSeccompProfileBatch(context.Context, *BatchSeccompProfileDefinitionRequest) (*BasicResponse, error)
	GetSeccompProfile(context.Context, *SeccompProfile) (*GetSeccompProfileResponse, error)
	ExtendSeccompProfile(context.Context, *ExtendSeccompProfileRequest) (*BasicResponse, error)
	GetAllDescendantProfiles(context.Context, *SeccompProfile) (*GetAllDescendantProfilesResponse, error)
	GetSeccompProfileByPrefix(context.Context, *SeccompProfile) (*GetAllDescendantProfilesResponse, error)
	mustEmbedUnimplementedSeccompServiceServer()
}

// UnimplementedSeccompServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeccompServiceServer struct {
}

func (UnimplementedSeccompServiceServer) DefineSeccompProfile(context.Context, *SeccompProfileDefinitionRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefineSeccompProfile not implemented")
}
func (UnimplementedSeccompServiceServer) DefineSeccompProfileBatch(context.Context, *BatchSeccompProfileDefinitionRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefineSeccompProfileBatch not implemented")
}
func (UnimplementedSeccompServiceServer) GetSeccompProfile(context.Context, *SeccompProfile) (*GetSeccompProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeccompProfile not implemented")
}
func (UnimplementedSeccompServiceServer) ExtendSeccompProfile(context.Context, *ExtendSeccompProfileRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendSeccompProfile not implemented")
}
func (UnimplementedSeccompServiceServer) GetAllDescendantProfiles(context.Context, *SeccompProfile) (*GetAllDescendantProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDescendantProfiles not implemented")
}
func (UnimplementedSeccompServiceServer) GetSeccompProfileByPrefix(context.Context, *SeccompProfile) (*GetAllDescendantProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeccompProfileByPrefix not implemented")
}
func (UnimplementedSeccompServiceServer) mustEmbedUnimplementedSeccompServiceServer() {}

// UnsafeSeccompServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeccompServiceServer will
// result in compilation errors.
type UnsafeSeccompServiceServer interface {
	mustEmbedUnimplementedSeccompServiceServer()
}

func RegisterSeccompServiceServer(s grpc.ServiceRegistrar, srv SeccompServiceServer) {
	s.RegisterService(&SeccompService_ServiceDesc, srv)
}

func _SeccompService_DefineSeccompProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeccompProfileDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeccompServiceServer).DefineSeccompProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.SeccompService/DefineSeccompProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeccompServiceServer).DefineSeccompProfile(ctx, req.(*SeccompProfileDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeccompService_DefineSeccompProfileBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSeccompProfileDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeccompServiceServer).DefineSeccompProfileBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.SeccompService/DefineSeccompProfileBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeccompServiceServer).DefineSeccompProfileBatch(ctx, req.(*BatchSeccompProfileDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeccompService_GetSeccompProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeccompProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeccompServiceServer).GetSeccompProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.SeccompService/GetSeccompProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeccompServiceServer).GetSeccompProfile(ctx, req.(*SeccompProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeccompService_ExtendSeccompProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendSeccompProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeccompServiceServer).ExtendSeccompProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.SeccompService/ExtendSeccompProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeccompServiceServer).ExtendSeccompProfile(ctx, req.(*ExtendSeccompProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeccompService_GetAllDescendantProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeccompProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeccompServiceServer).GetAllDescendantProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.SeccompService/GetAllDescendantProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeccompServiceServer).GetAllDescendantProfiles(ctx, req.(*SeccompProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeccompService_GetSeccompProfileByPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeccompProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeccompServiceServer).GetSeccompProfileByPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.SeccompService/GetSeccompProfileByPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeccompServiceServer).GetSeccompProfileByPrefix(ctx, req.(*SeccompProfile))
	}
	return interceptor(ctx, in, info, handler)
}

// SeccompService_ServiceDesc is the grpc.ServiceDesc for SeccompService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeccompService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.SeccompService",
	HandlerType: (*SeccompServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DefineSeccompProfile",
			Handler:    _SeccompService_DefineSeccompProfile_Handler,
		},
		{
			MethodName: "DefineSeccompProfileBatch",
			Handler:    _SeccompService_DefineSeccompProfileBatch_Handler,
		},
		{
			MethodName: "GetSeccompProfile",
			Handler:    _SeccompService_GetSeccompProfile_Handler,
		},
		{
			MethodName: "ExtendSeccompProfile",
			Handler:    _SeccompService_ExtendSeccompProfile_Handler,
		},
		{
			MethodName: "GetAllDescendantProfiles",
			Handler:    _SeccompService_GetAllDescendantProfiles_Handler,
		},
		{
			MethodName: "GetSeccompProfileByPrefix",
			Handler:    _SeccompService_GetSeccompProfileByPrefix_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profiles.proto",
}
